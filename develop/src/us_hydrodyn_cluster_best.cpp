// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

// note: this program uses cout and/or cerr and this should be replaced

#include "../include/us_hydrodyn_cluster_best.h"

US_Hydrodyn_Cluster_Best::US_Hydrodyn_Cluster_Best(
                                                   void                     *              us_hydrodyn,
                                                   map < QString, QString > *              parameters,
                                                   QWidget *                               p,
                                                   const char *                            name
                                                   ) : QDialog( p, name )
{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   setCaption( tr( "US-SOMO: BEST cluster interface" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Cluster_Best::~US_Hydrodyn_Cluster_Best()
{
}

void US_Hydrodyn_Cluster_Best::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: BEST cluster interface" ), this );
   lbl_title -> setFrameStyle   ( QFrame::WinPanel | QFrame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Cite: Michael Connolly, http://biohedron.drupalgardens.com, \"MSRoll\"", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( QPalette( USglobal->global_colors.cg_label, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_credits_2 =  new QLabel      ( "Cite: S.R. Aragon, \"A precise boundary element method for macromolecular transport properties\", J. Comp. Chem, 25, 1191-1205 (2004).", this );
   lbl_credits_2 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_2 -> setMinimumHeight( minHeight1 );
   lbl_credits_2 -> setPalette      ( QPalette( USglobal->global_colors.cg_label, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   lbl_credits_2 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_best_msr_gridspace = new QLabel      ( tr( "MSROLL: grid spacing" ), this );
   lbl_best_msr_gridspace ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_msr_gridspace ->setMinimumHeight( minHeight1 );
   lbl_best_msr_gridspace ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_msr_gridspace ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_msr_gridspace ->setMinimumWidth ( QFontMetrics( lbl_best_msr_gridspace->font() ).maxWidth() * 47 );

   le_best_msr_gridspace = new QLineEdit     ( this, "best_msr_gridspace Line Edit" );
   le_best_msr_gridspace ->setText           ( parameters->count( "best_msr_gridspace" ) ? ( *parameters )[ "best_msr_gridspace" ] : "" );
   le_best_msr_gridspace ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_msr_gridspace ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_msr_gridspace ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_msr_gridspace ->setMinimumHeight  ( minHeight1 );
   le_best_msr_gridspace ->setMinimumWidth   ( 150 );
   connect( le_best_msr_gridspace, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_msr_gridspace( const QString & ) ) );

   lbl_best_msr_prober = new QLabel      ( tr( "MSROLL: probe radius" ), this );
   lbl_best_msr_prober ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_msr_prober ->setMinimumHeight( minHeight1 );
   lbl_best_msr_prober ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_msr_prober ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_msr_prober ->setMinimumWidth ( QFontMetrics( lbl_best_msr_prober->font() ).maxWidth() * 47 );

   le_best_msr_prober = new QLineEdit     ( this, "best_msr_prober Line Edit" );
   le_best_msr_prober ->setText           ( parameters->count( "best_msr_prober" ) ? ( *parameters )[ "best_msr_prober" ] : "" );
   le_best_msr_prober ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_msr_prober ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_msr_prober ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_msr_prober ->setMinimumHeight  ( minHeight1 );
   le_best_msr_prober ->setMinimumWidth   ( 150 );
   connect( le_best_msr_prober, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_msr_prober( const QString & ) ) );

   lbl_best_msr_finenessangle = new QLabel      ( tr( "MSROLL: fineness angle (max ~0.3)" ), this );
   lbl_best_msr_finenessangle ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_msr_finenessangle ->setMinimumHeight( minHeight1 );
   lbl_best_msr_finenessangle ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_msr_finenessangle ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_msr_finenessangle ->setMinimumWidth ( QFontMetrics( lbl_best_msr_finenessangle->font() ).maxWidth() * 47 );

   le_best_msr_finenessangle = new QLineEdit     ( this, "best_msr_finenessangle Line Edit" );
   le_best_msr_finenessangle ->setText           ( parameters->count( "best_msr_finenessangle" ) ? ( *parameters )[ "best_msr_finenessangle" ] : "" );
   le_best_msr_finenessangle ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_msr_finenessangle ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_msr_finenessangle ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_msr_finenessangle ->setMinimumHeight  ( minHeight1 );
   le_best_msr_finenessangle ->setMinimumWidth   ( 150 );
   connect( le_best_msr_finenessangle, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_msr_finenessangle( const QString & ) ) );

   lbl_best_msr_coalescer = new QLabel      ( tr( "MSROLL: coalesce radius" ), this );
   lbl_best_msr_coalescer ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_msr_coalescer ->setMinimumHeight( minHeight1 );
   lbl_best_msr_coalescer ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_msr_coalescer ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_msr_coalescer ->setMinimumWidth ( QFontMetrics( lbl_best_msr_coalescer->font() ).maxWidth() * 47 );

   le_best_msr_coalescer = new QLineEdit     ( this, "best_msr_coalescer Line Edit" );
   le_best_msr_coalescer ->setText           ( parameters->count( "best_msr_coalescer" ) ? ( *parameters )[ "best_msr_coalescer" ] : "" );
   le_best_msr_coalescer ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_msr_coalescer ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_msr_coalescer ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_msr_coalescer ->setMinimumHeight  ( minHeight1 );
   le_best_msr_coalescer ->setMinimumWidth   ( 150 );
   connect( le_best_msr_coalescer, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_msr_coalescer( const QString & ) ) );

   lbl_best_rcoal_nmin = new QLabel      ( tr( "COALESCE: minimum number of triangles (Typically 2000 for small and 3000 for large protein)" ), this );
   lbl_best_rcoal_nmin ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_rcoal_nmin ->setMinimumHeight( minHeight1 );
   lbl_best_rcoal_nmin ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_rcoal_nmin ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_rcoal_nmin ->setMinimumWidth ( QFontMetrics( lbl_best_rcoal_nmin->font() ).maxWidth() * 47 );

   le_best_rcoal_nmin = new QLineEdit     ( this, "best_rcoal_nmin Line Edit" );
   le_best_rcoal_nmin ->setText           ( parameters->count( "best_rcoal_nmin" ) ? ( *parameters )[ "best_rcoal_nmin" ] : "" );
   le_best_rcoal_nmin ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_rcoal_nmin ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_rcoal_nmin ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_rcoal_nmin ->setMinimumHeight  ( minHeight1 );
   le_best_rcoal_nmin ->setMinimumWidth   ( 150 );
   connect( le_best_rcoal_nmin, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_rcoal_nmin( const QString & ) ) );

   lbl_best_rcoal_nmax = new QLabel      ( tr( "COALESCE: maximum number of triangles (Typically 4000 for small and 9000 for large protein)" ), this );
   lbl_best_rcoal_nmax ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_rcoal_nmax ->setMinimumHeight( minHeight1 );
   lbl_best_rcoal_nmax ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_rcoal_nmax ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_rcoal_nmax ->setMinimumWidth ( QFontMetrics( lbl_best_rcoal_nmax->font() ).maxWidth() * 47 );

   le_best_rcoal_nmax = new QLineEdit     ( this, "best_rcoal_nmax Line Edit" );
   le_best_rcoal_nmax ->setText           ( parameters->count( "best_rcoal_nmax" ) ? ( *parameters )[ "best_rcoal_nmax" ] : "" );
   le_best_rcoal_nmax ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_rcoal_nmax ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_rcoal_nmax ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_rcoal_nmax ->setMinimumHeight  ( minHeight1 );
   le_best_rcoal_nmax ->setMinimumWidth   ( 150 );
   connect( le_best_rcoal_nmax, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_rcoal_nmax( const QString & ) ) );

   lbl_best_rcoal_n = new QLabel      ( tr( "COALESCE: number of files produced (Typically 4)" ), this );
   lbl_best_rcoal_n ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_rcoal_n ->setMinimumHeight( minHeight1 );
   lbl_best_rcoal_n ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_rcoal_n ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_rcoal_n ->setMinimumWidth ( QFontMetrics( lbl_best_rcoal_n->font() ).maxWidth() * 47 );

   le_best_rcoal_n = new QLineEdit     ( this, "best_rcoal_n Line Edit" );
   le_best_rcoal_n ->setText           ( parameters->count( "best_rcoal_n" ) ? ( *parameters )[ "best_rcoal_n" ] : "" );
   le_best_rcoal_n ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_rcoal_n ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_rcoal_n ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_rcoal_n ->setMinimumHeight  ( minHeight1 );
   le_best_rcoal_n ->setMinimumWidth   ( 150 );
   connect( le_best_rcoal_n, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_rcoal_n( const QString & ) ) );

   lbl_best_best_mw = new QLabel      ( tr( "BEST: override computed molecular weight (default:blank=compute from structure)" ), this );
   lbl_best_best_mw ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_best_best_mw ->setMinimumHeight( minHeight1 );
   lbl_best_best_mw ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_best_best_mw ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_best_best_mw ->setMinimumWidth ( QFontMetrics( lbl_best_best_mw->font() ).maxWidth() * 47 );

   le_best_best_mw = new QLineEdit     ( this, "best_best_mw Line Edit" );
   le_best_best_mw ->setText           ( parameters->count( "best_best_mw" ) ? ( *parameters )[ "best_best_mw" ] : "" );
   le_best_best_mw ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_best_best_mw ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_best_best_mw ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_best_best_mw ->setMinimumHeight  ( minHeight1 );
   le_best_best_mw ->setMinimumWidth   ( 150 );
   connect( le_best_best_mw, SIGNAL( textChanged( const QString & ) ), SLOT( update_best_best_mw( const QString & ) ) );

   cb_best_best_na = new QCheckBox    ( tr( "BEST: omit the area correction (default:unchecked) {this is actually a regularization, so it is not advised to check this!}" ), this );
   cb_best_best_na ->setMinimumHeight ( minHeight1 );
   cb_best_best_na ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_best_best_na ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_best_best_na ->setMinimumWidth  ( QFontMetrics( cb_best_best_na->font() ).maxWidth() * 47 );

   cb_best_best_na ->setChecked        ( parameters->count( "best_best_na" ) && ( *parameters )[ "best_best_na" ] == "true" ? true : false );
   connect( cb_best_best_na, SIGNAL( clicked() ), SLOT( set_best_best_na() ) );

   cb_best_best_p = new QCheckBox    ( tr( "BEST: perform a pre-averaged hydrodynamic interaction calculation (default:unchecked)" ), this );
   cb_best_best_p ->setMinimumHeight ( minHeight1 );
   cb_best_best_p ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_best_best_p ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_best_best_p ->setMinimumWidth  ( QFontMetrics( cb_best_best_p->font() ).maxWidth() * 47 );

   cb_best_best_p ->setChecked        ( parameters->count( "best_best_p" ) && ( *parameters )[ "best_best_p" ] == "true" ? true : false );
   connect( cb_best_best_p, SIGNAL( clicked() ), SLOT( set_best_best_p() ) );

   cb_best_best_v = new QCheckBox    ( tr( "BEST: Compute the Viscosity Factor {in the Centroid} (default:unchecked)" ), this );
   cb_best_best_v ->setMinimumHeight ( minHeight1 );
   cb_best_best_v ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_best_best_v ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_best_best_v ->setMinimumWidth  ( QFontMetrics( cb_best_best_v->font() ).maxWidth() * 47 );

   cb_best_best_v ->setChecked        ( parameters->count( "best_best_v" ) && ( *parameters )[ "best_best_v" ] == "true" ? true : false );
   connect( cb_best_best_v, SIGNAL( clicked() ), SLOT( set_best_best_v() ) );

   cb_best_best_vc = new QCheckBox    ( tr( "BEST: Compute the Viscosity Factor in the Center of Viscosity {longer calculation} (default:checked)" ), this );
   cb_best_best_vc ->setMinimumHeight ( minHeight1 );
   cb_best_best_vc ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_best_best_vc ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_best_best_vc ->setMinimumWidth  ( QFontMetrics( cb_best_best_vc->font() ).maxWidth() * 47 );

   if ( !parameters->count( "best_best_vc" ) )
   {
      ( *parameters )[ "best_best_vc" ] = "true";
   }
   cb_best_best_vc ->setChecked        ( parameters->count( "best_best_vc" ) && ( *parameters )[ "best_best_vc" ] == "true" ? true : false );
   connect( cb_best_best_vc, SIGNAL( clicked() ), SLOT( set_best_best_vc() ) );

   pb_save =  new QPushButton ( tr( "Save" ), this );
   pb_save -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_save -> setMinimumHeight( minHeight1 );
   pb_save -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_save, SIGNAL( clicked() ), SLOT( save() ) );

   pb_load =  new QPushButton ( tr( "Load" ), this );
   pb_load -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_load -> setMinimumHeight( minHeight1 );
   pb_load -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_load, SIGNAL( clicked() ), SLOT( load() ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   QVBoxLayout *background = new QVBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addWidget( lbl_credits_2 );
   background->addSpacing( 4 );
   QHBoxLayout * hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_msr_gridspace );
   hbl->addWidget( le_best_msr_gridspace );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_msr_prober );
   hbl->addWidget( le_best_msr_prober );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_msr_finenessangle );
   hbl->addWidget( le_best_msr_finenessangle );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_msr_coalescer );
   hbl->addWidget( le_best_msr_coalescer );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_rcoal_nmin );
   hbl->addWidget( le_best_rcoal_nmin );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_rcoal_nmax );
   hbl->addWidget( le_best_rcoal_nmax );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_rcoal_n );
   hbl->addWidget( le_best_rcoal_n );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_best_best_mw );
   hbl->addWidget( le_best_best_mw );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_best_best_na );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_best_best_p );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_best_best_v );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_best_best_vc );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( pb_save );
   hbl->addWidget( pb_load );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );


   QHBoxLayout *hbl_bottom = new QHBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
   qApp->processEvents();
   resize( 0, 0 );
}

void US_Hydrodyn_Cluster_Best::cancel()
{
   close();
}

void US_Hydrodyn_Cluster_Best::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/best.html");
}

void US_Hydrodyn_Cluster_Best::closeEvent( QCloseEvent *e )
{
   if ( parameters->count( "best_msr_gridspace" ) &&
        (*parameters)[ "best_msr_gridspace" ].isEmpty() )
   {
      parameters->erase( "best_msr_gridspace" );
   }
   if ( parameters->count( "best_msr_prober" ) &&
        (*parameters)[ "best_msr_prober" ].isEmpty() )
   {
      parameters->erase( "best_msr_prober" );
   }
   if ( parameters->count( "best_msr_finenessangle" ) &&
        (*parameters)[ "best_msr_finenessangle" ].isEmpty() )
   {
      parameters->erase( "best_msr_finenessangle" );
   }
   if ( parameters->count( "best_msr_coalescer" ) &&
        (*parameters)[ "best_msr_coalescer" ].isEmpty() )
   {
      parameters->erase( "best_msr_coalescer" );
   }
   if ( parameters->count( "best_rcoal_nmin" ) &&
        (*parameters)[ "best_rcoal_nmin" ].isEmpty() )
   {
      parameters->erase( "best_rcoal_nmin" );
   }
   if ( parameters->count( "best_rcoal_nmax" ) &&
        (*parameters)[ "best_rcoal_nmax" ].isEmpty() )
   {
      parameters->erase( "best_rcoal_nmax" );
   }
   if ( parameters->count( "best_rcoal_n" ) &&
        (*parameters)[ "best_rcoal_n" ].isEmpty() )
   {
      parameters->erase( "best_rcoal_n" );
   }
   if ( parameters->count( "best_best_mw" ) &&
        (*parameters)[ "best_best_mw" ].isEmpty() )
   {
      parameters->erase( "best_best_mw" );
   }
   if ( parameters->count( "best_best_na" ) &&
        ( (*parameters)[ "best_best_na" ].isEmpty() ||
          (*parameters)[ "best_best_na" ] == "false" ) )
   {
      parameters->erase( "best_best_na" );
   }
   if ( parameters->count( "best_best_p" ) &&
        ( (*parameters)[ "best_best_p" ].isEmpty() ||
          (*parameters)[ "best_best_p" ] == "false" ) )
   {
      parameters->erase( "best_best_p" );
   }
   if ( parameters->count( "best_best_v" ) &&
        ( (*parameters)[ "best_best_v" ].isEmpty() ||
          (*parameters)[ "best_best_v" ] == "false" ) )
   {
      parameters->erase( "best_best_v" );
   }

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Cluster_Best::update_best_msr_gridspace( const QString & )
{
   ( *parameters )[ "best_msr_gridspace" ] = le_best_msr_gridspace->text();
}

void US_Hydrodyn_Cluster_Best::update_best_msr_prober( const QString & )
{
   ( *parameters )[ "best_msr_prober" ] = le_best_msr_prober->text();
}

void US_Hydrodyn_Cluster_Best::update_best_msr_finenessangle( const QString & )
{
   ( *parameters )[ "best_msr_finenessangle" ] = le_best_msr_finenessangle->text();
}

void US_Hydrodyn_Cluster_Best::update_best_msr_coalescer( const QString & )
{
   ( *parameters )[ "best_msr_coalescer" ] = le_best_msr_coalescer->text();
}

void US_Hydrodyn_Cluster_Best::update_best_rcoal_nmin( const QString & )
{
   ( *parameters )[ "best_rcoal_nmin" ] = le_best_rcoal_nmin->text();
}

void US_Hydrodyn_Cluster_Best::update_best_rcoal_nmax( const QString & )
{
   ( *parameters )[ "best_rcoal_nmax" ] = le_best_rcoal_nmax->text();
}

void US_Hydrodyn_Cluster_Best::update_best_rcoal_n( const QString & )
{
   ( *parameters )[ "best_rcoal_n" ] = le_best_rcoal_n->text();
}

void US_Hydrodyn_Cluster_Best::update_best_best_mw( const QString & )
{
   ( *parameters )[ "best_best_mw" ] = le_best_best_mw->text();
}

void US_Hydrodyn_Cluster_Best::set_best_best_na()
{
   ( *parameters )[ "best_best_na" ] = cb_best_best_na->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::set_best_best_p()
{
   ( *parameters )[ "best_best_p" ] = cb_best_best_p->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::set_best_best_v()
{
   ( *parameters )[ "best_best_v" ] = cb_best_best_v->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::set_best_best_vc()
{
   ( *parameters )[ "best_best_vc" ] = cb_best_best_vc->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::save()
{
   QString fn = QFileDialog::getSaveFileName( 
                                              QString::null, 
                                              "*.cluster_best",
                                              this,
                                              tr( QString( "%1: Save" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                              tr( "Save the parameters" ) 
                                              );

   if( !fn.isEmpty() )
   {
      if ( !fn.contains( QRegExp( "\\.cluster_best$" ) ) )
      {
         fn += ".cluster_best";
      }
      QFile f( fn );
      if ( !f.open( IO_WriteOnly ) )
      {
         QMessageBox::information( this,
                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                   QString( tr( "Could not open file %1 for writing" ) )
                                   .arg( fn ) 
                                   );
         return;
      }
      QTextStream ts( &f );
      ts << US_Json::compose( *parameters );
      f.close();
   }
}

void US_Hydrodyn_Cluster_Best::load()
{
   QString fn = QFileDialog::getOpenFileName( 
                                              QString::null, 
                                              "*.cluster_best",
                                              this,
                                              tr( QString( "%1: Open" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                              tr( "Load parameters" ) 
                                              );
   if( !fn.isEmpty() )
   {
      QFile f( fn );
      if ( !f.open( IO_ReadOnly ) )
      {
          QMessageBox::information( 
                                    this,
                                    tr( QString( "%1: Open" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                    QString( tr( "Could not open file %1 for reading" ) )
                                    .arg( fn ) 
                                    );
          return;
      }
      QString qs;
      QTextStream ts( &f );
      while ( !ts.atEnd() )
      {
          qs += ts.readLine();
      }
      f.close();
      *parameters = US_Json::split( qs );
      update_fields();
   }
}

void US_Hydrodyn_Cluster_Best::update_fields()
{
   le_best_msr_gridspace                           ->setText( parameters->count( "best_msr_gridspace" ) ? ( *parameters )[ "best_msr_gridspace" ] : "" );
   le_best_msr_prober                              ->setText( parameters->count( "best_msr_prober" ) ? ( *parameters )[ "best_msr_prober" ] : "" );
   le_best_msr_finenessangle                       ->setText( parameters->count( "best_msr_finenessangle" ) ? ( *parameters )[ "best_msr_finenessangle" ] : "" );
   le_best_msr_coalescer                           ->setText( parameters->count( "best_msr_coalescer" ) ? ( *parameters )[ "best_msr_coalescer" ] : "" );
   le_best_rcoal_nmin                              ->setText( parameters->count( "best_rcoal_nmin" ) ? ( *parameters )[ "best_rcoal_nmin" ] : "" );
   le_best_rcoal_nmax                              ->setText( parameters->count( "best_rcoal_nmax" ) ? ( *parameters )[ "best_rcoal_nmax" ] : "" );
   le_best_rcoal_n                                 ->setText( parameters->count( "best_rcoal_n" ) ? ( *parameters )[ "best_rcoal_n" ] : "" );
   le_best_best_mw                                 ->setText( parameters->count( "best_best_mw" ) ? ( *parameters )[ "best_best_mw" ] : "" );
   cb_best_best_na                                 ->setChecked( parameters->count( "best_best_na" ) && ( *parameters )[ "best_best_na" ] == "true" ? true : false );
   cb_best_best_p                                  ->setChecked( parameters->count( "best_best_p" ) && ( *parameters )[ "best_best_p" ] == "true" ? true : false );
   cb_best_best_v                                  ->setChecked( parameters->count( "best_best_v" ) && ( *parameters )[ "best_best_v" ] == "true" ? true : false );
   cb_best_best_vc                                 ->setChecked( parameters->count( "best_best_vc" ) && ( *parameters )[ "best_best_vc" ] == "true" ? true : false );
}

