// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_cluster_bfnb.h"

US_Hydrodyn_Cluster_Bfnb::US_Hydrodyn_Cluster_Bfnb(
                                                   void                     *              us_hydrodyn,
                                                   map < QString, QString > *              parameters,
                                                   QWidget *                               p,
                                                   const char *                            name
                                                   ) : QDialog( p, name )
{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   setCaption( tr( "US-SOMO: BNFB cluster interface" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Cluster_Bfnb::~US_Hydrodyn_Cluster_Bfnb()
{
}

void US_Hydrodyn_Cluster_Bfnb::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: BNFB cluster interface" ), this );
   lbl_title -> setFrameStyle   ( QFrame::WinPanel | QFrame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( QPalette( USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame, USglobal->global_colors.cg_frame ) );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Cite: Brookes, E. BFNB 2013", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( QPalette( USglobal->global_colors.cg_label, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_pmtypes = new QLabel      ( tr( "Model type list\n(0=sphere,1=cylinder,2=spheroid,\n3=ellipsoid,4=torus)" ), this );
   lbl_pmtypes ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmtypes ->setMinimumHeight( minHeight1 *  3 );
   lbl_pmtypes ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmtypes ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmtypes ->setMinimumWidth ( QFontMetrics( lbl_pmtypes->font() ).maxWidth() * 19 );

   le_pmtypes = new QLineEdit     ( this, "pmtypes Line Edit" );
   le_pmtypes ->setText           ( parameters->count( "pmtypes" ) ? ( *parameters )[ "pmtypes" ] : "" );
   le_pmtypes ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmtypes ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmtypes ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmtypes ->setMinimumHeight  ( minHeight1 *  3 );
   le_pmtypes ->setMinimumWidth   ( 150 );
   connect( le_pmtypes, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmtypes( const QString & ) ) );

   cb_pmincrementally = new QCheckBox    ( tr( "Compute models for all lengths upto above" ), this );
   cb_pmincrementally ->setMinimumHeight ( minHeight1 );
   cb_pmincrementally ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_pmincrementally ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_pmincrementally ->setMinimumWidth ( QFontMetrics( cb_pmincrementally->font() ).maxWidth() * 19 );

   cb_pmincrementally ->setChecked        ( parameters->count( "pmincrementally" ) && ( *parameters )[ "pmincrementally" ] == "true" ? true : false );
   connect( cb_pmincrementally, SIGNAL( clicked() ), SLOT( set_pmincrementally() ) );

   cb_pmallcombinations = new QCheckBox    ( tr( "Compute models for all unique combinations" ), this );
   cb_pmallcombinations ->setMinimumHeight ( minHeight1 );
   cb_pmallcombinations ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_pmallcombinations ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_pmallcombinations ->setMinimumWidth ( QFontMetrics( cb_pmallcombinations->font() ).maxWidth() * 19 );

   cb_pmallcombinations ->setChecked        ( parameters->count( "pmallcombinations" ) && ( *parameters )[ "pmallcombinations" ] == "true" ? true : false );
   connect( cb_pmallcombinations, SIGNAL( clicked() ), SLOT( set_pmallcombinations() ) );

   lbl_pmrayleighdrho = new QLabel      ( tr( "Delta rho (sample - buffer):" ), this );
   lbl_pmrayleighdrho ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmrayleighdrho ->setMinimumHeight( minHeight1 );
   lbl_pmrayleighdrho ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmrayleighdrho ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmrayleighdrho ->setMinimumWidth ( QFontMetrics( lbl_pmrayleighdrho->font() ).maxWidth() * 19 );

   le_pmrayleighdrho = new QLineEdit     ( this, "pmrayleighdrho Line Edit" );
   le_pmrayleighdrho ->setText           ( parameters->count( "pmrayleighdrho" ) ? ( *parameters )[ "pmrayleighdrho" ] : "" );
   le_pmrayleighdrho ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmrayleighdrho ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmrayleighdrho ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmrayleighdrho ->setMinimumHeight  ( minHeight1 );
   le_pmrayleighdrho ->setMinimumWidth   ( 150 );
   connect( le_pmrayleighdrho, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmrayleighdrho( const QString & ) ) );

   lbl_pmoutname = new QLabel      ( tr( "Output name prefix (default: blank)" ), this );
   lbl_pmoutname ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmoutname ->setMinimumHeight( minHeight1 );
   lbl_pmoutname ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmoutname ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmoutname ->setMinimumWidth ( QFontMetrics( lbl_pmoutname->font() ).maxWidth() * 19 );

   le_pmoutname = new QLineEdit     ( this, "pmoutname Line Edit" );
   le_pmoutname ->setText           ( parameters->count( "pmoutname" ) ? ( *parameters )[ "pmoutname" ] : "" );
   le_pmoutname ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmoutname ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmoutname ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmoutname ->setMinimumHeight  ( minHeight1 );
   le_pmoutname ->setMinimumWidth   ( 150 );
   connect( le_pmoutname, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmoutname( const QString & ) ) );

   lbl_pmgridsize = new QLabel      ( tr( "Grid size (A)" ), this );
   lbl_pmgridsize ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgridsize ->setMinimumHeight( minHeight1 );
   lbl_pmgridsize ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgridsize ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgridsize ->setMinimumWidth ( QFontMetrics( lbl_pmgridsize->font() ).maxWidth() * 19 );

   le_pmgridsize = new QLineEdit     ( this, "pmgridsize Line Edit" );
   le_pmgridsize ->setText           ( parameters->count( "pmgridsize" ) ? ( *parameters )[ "pmgridsize" ] : "" );
   le_pmgridsize ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgridsize ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgridsize ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgridsize ->setMinimumHeight  ( minHeight1 );
   le_pmgridsize ->setMinimumWidth   ( 150 );
   connect( le_pmgridsize, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgridsize( const QString & ) ) );

   cb_pmapproxmaxdimension = new QCheckBox    ( tr( "Automatically compute maximum dimension" ), this );
   cb_pmapproxmaxdimension ->setMinimumHeight ( minHeight1 );
   cb_pmapproxmaxdimension ->setPalette       ( QPalette(USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   cb_pmapproxmaxdimension ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_pmapproxmaxdimension ->setMinimumWidth ( QFontMetrics( cb_pmapproxmaxdimension->font() ).maxWidth() * 19 );

   cb_pmapproxmaxdimension ->setChecked        ( parameters->count( "pmapproxmaxdimension" ) && ( *parameters )[ "pmapproxmaxdimension" ] == "true" ? true : false );
   connect( cb_pmapproxmaxdimension, SIGNAL( clicked() ), SLOT( set_pmapproxmaxdimension() ) );

   lbl_pmharmonics = new QLabel      ( tr( "Maximum harmonics (default: 15)" ), this );
   lbl_pmharmonics ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmharmonics ->setMinimumHeight( minHeight1 );
   lbl_pmharmonics ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmharmonics ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmharmonics ->setMinimumWidth ( QFontMetrics( lbl_pmharmonics->font() ).maxWidth() * 19 );

   le_pmharmonics = new QLineEdit     ( this, "pmharmonics Line Edit" );
   le_pmharmonics ->setText           ( parameters->count( "pmharmonics" ) ? ( *parameters )[ "pmharmonics" ] : "" );
   le_pmharmonics ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmharmonics ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmharmonics ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmharmonics ->setMinimumHeight  ( minHeight1 );
   le_pmharmonics ->setMinimumWidth   ( 150 );
   connect( le_pmharmonics, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmharmonics( const QString & ) ) );

   lbl_pmseed = new QLabel      ( tr( "Random seed (default: use time)" ), this );
   lbl_pmseed ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmseed ->setMinimumHeight( minHeight1 );
   lbl_pmseed ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmseed ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmseed ->setMinimumWidth ( QFontMetrics( lbl_pmseed->font() ).maxWidth() * 19 );

   le_pmseed = new QLineEdit     ( this, "pmseed Line Edit" );
   le_pmseed ->setText           ( parameters->count( "pmseed" ) ? ( *parameters )[ "pmseed" ] : "" );
   le_pmseed ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmseed ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmseed ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmseed ->setMinimumHeight  ( minHeight1 );
   le_pmseed ->setMinimumWidth   ( 150 );
   connect( le_pmseed, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmseed( const QString & ) ) );

   lbl_pmmemory = new QLabel      ( tr( "Maximum memory per core in MB (default: 1024)" ), this );
   lbl_pmmemory ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmmemory ->setMinimumHeight( minHeight1 );
   lbl_pmmemory ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmmemory ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmmemory ->setMinimumWidth ( QFontMetrics( lbl_pmmemory->font() ).maxWidth() * 19 );

   le_pmmemory = new QLineEdit     ( this, "pmmemory Line Edit" );
   le_pmmemory ->setText           ( parameters->count( "pmmemory" ) ? ( *parameters )[ "pmmemory" ] : "" );
   le_pmmemory ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmmemory ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmmemory ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmmemory ->setMinimumHeight  ( minHeight1 );
   le_pmmemory ->setMinimumWidth   ( 150 );
   connect( le_pmmemory, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmmemory( const QString & ) ) );

   lbl_pmbestfinestconversion = new QLabel      ( tr( "Finest grid size (default: same as Grid size)" ), this );
   lbl_pmbestfinestconversion ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestfinestconversion ->setMinimumHeight( minHeight1 );
   lbl_pmbestfinestconversion ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestfinestconversion ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestfinestconversion ->setMinimumWidth ( QFontMetrics( lbl_pmbestfinestconversion->font() ).maxWidth() * 19 );

   le_pmbestfinestconversion = new QLineEdit     ( this, "pmbestfinestconversion Line Edit" );
   le_pmbestfinestconversion ->setText           ( parameters->count( "pmbestfinestconversion" ) ? ( *parameters )[ "pmbestfinestconversion" ] : "" );
   le_pmbestfinestconversion ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestfinestconversion ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestfinestconversion ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestfinestconversion ->setMinimumHeight  ( minHeight1 );
   le_pmbestfinestconversion ->setMinimumWidth   ( 150 );
   connect( le_pmbestfinestconversion, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestfinestconversion( const QString & ) ) );

   lbl_pmbestcoarseconversion = new QLabel      ( tr( "Coarse grid size (default: 10)" ), this );
   lbl_pmbestcoarseconversion ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestcoarseconversion ->setMinimumHeight( minHeight1 );
   lbl_pmbestcoarseconversion ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestcoarseconversion ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestcoarseconversion ->setMinimumWidth ( QFontMetrics( lbl_pmbestcoarseconversion->font() ).maxWidth() * 19 );

   le_pmbestcoarseconversion = new QLineEdit     ( this, "pmbestcoarseconversion Line Edit" );
   le_pmbestcoarseconversion ->setText           ( parameters->count( "pmbestcoarseconversion" ) ? ( *parameters )[ "pmbestcoarseconversion" ] : "" );
   le_pmbestcoarseconversion ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestcoarseconversion ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestcoarseconversion ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestcoarseconversion ->setMinimumHeight  ( minHeight1 );
   le_pmbestcoarseconversion ->setMinimumWidth   ( 150 );
   connect( le_pmbestcoarseconversion, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestcoarseconversion( const QString & ) ) );

   lbl_pmbestconversiondivisor = new QLabel      ( tr( "Conversion divisor (default: 2.5)" ), this );
   lbl_pmbestconversiondivisor ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestconversiondivisor ->setMinimumHeight( minHeight1 );
   lbl_pmbestconversiondivisor ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestconversiondivisor ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestconversiondivisor ->setMinimumWidth ( QFontMetrics( lbl_pmbestconversiondivisor->font() ).maxWidth() * 19 );

   le_pmbestconversiondivisor = new QLineEdit     ( this, "pmbestconversiondivisor Line Edit" );
   le_pmbestconversiondivisor ->setText           ( parameters->count( "pmbestconversiondivisor" ) ? ( *parameters )[ "pmbestconversiondivisor" ] : "" );
   le_pmbestconversiondivisor ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestconversiondivisor ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestconversiondivisor ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestconversiondivisor ->setMinimumHeight  ( minHeight1 );
   le_pmbestconversiondivisor ->setMinimumWidth   ( 150 );
   connect( le_pmbestconversiondivisor, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestconversiondivisor( const QString & ) ) );

   lbl_pmbestrefinementrangepct = new QLabel      ( tr( "Refinement percent (default: 2.5)" ), this );
   lbl_pmbestrefinementrangepct ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestrefinementrangepct ->setMinimumHeight( minHeight1 );
   lbl_pmbestrefinementrangepct ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestrefinementrangepct ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestrefinementrangepct ->setMinimumWidth ( QFontMetrics( lbl_pmbestrefinementrangepct->font() ).maxWidth() * 19 );

   le_pmbestrefinementrangepct = new QLineEdit     ( this, "pmbestrefinementrangepct Line Edit" );
   le_pmbestrefinementrangepct ->setText           ( parameters->count( "pmbestrefinementrangepct" ) ? ( *parameters )[ "pmbestrefinementrangepct" ] : "" );
   le_pmbestrefinementrangepct ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestrefinementrangepct ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestrefinementrangepct ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestrefinementrangepct ->setMinimumHeight  ( minHeight1 );
   le_pmbestrefinementrangepct ->setMinimumWidth   ( 150 );
   connect( le_pmbestrefinementrangepct, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestrefinementrangepct( const QString & ) ) );

   lbl_pmmaxdimension = new QLabel      ( tr( "Maximum dimension (default & max: 32767 A)" ), this );
   lbl_pmmaxdimension ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmmaxdimension ->setMinimumHeight( minHeight1 );
   lbl_pmmaxdimension ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmmaxdimension ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmmaxdimension ->setMinimumWidth ( QFontMetrics( lbl_pmmaxdimension->font() ).maxWidth() * 19 );

   le_pmmaxdimension = new QLineEdit     ( this, "pmmaxdimension Line Edit" );
   le_pmmaxdimension ->setText           ( parameters->count( "pmmaxdimension" ) ? ( *parameters )[ "pmmaxdimension" ] : "" );
   le_pmmaxdimension ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmmaxdimension ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmmaxdimension ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmmaxdimension ->setMinimumHeight  ( minHeight1 );
   le_pmmaxdimension ->setMinimumWidth   ( 150 );
   connect( le_pmmaxdimension, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmmaxdimension( const QString & ) ) );

   lbl_pmgapopulation = new QLabel      ( tr( "GA population size (default: 100)" ), this );
   lbl_pmgapopulation ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgapopulation ->setMinimumHeight( minHeight1 );
   lbl_pmgapopulation ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgapopulation ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgapopulation ->setMinimumWidth ( QFontMetrics( lbl_pmgapopulation->font() ).maxWidth() * 19 );

   le_pmgapopulation = new QLineEdit     ( this, "pmgapopulation Line Edit" );
   le_pmgapopulation ->setText           ( parameters->count( "pmgapopulation" ) ? ( *parameters )[ "pmgapopulation" ] : "" );
   le_pmgapopulation ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgapopulation ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgapopulation ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgapopulation ->setMinimumHeight  ( minHeight1 );
   le_pmgapopulation ->setMinimumWidth   ( 150 );
   connect( le_pmgapopulation, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgapopulation( const QString & ) ) );

   lbl_pmgagenerations = new QLabel      ( tr( "GA generations (default: 100)" ), this );
   lbl_pmgagenerations ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgagenerations ->setMinimumHeight( minHeight1 );
   lbl_pmgagenerations ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgagenerations ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgagenerations ->setMinimumWidth ( QFontMetrics( lbl_pmgagenerations->font() ).maxWidth() * 19 );

   le_pmgagenerations = new QLineEdit     ( this, "pmgagenerations Line Edit" );
   le_pmgagenerations ->setText           ( parameters->count( "pmgagenerations" ) ? ( *parameters )[ "pmgagenerations" ] : "" );
   le_pmgagenerations ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgagenerations ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgagenerations ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgagenerations ->setMinimumHeight  ( minHeight1 );
   le_pmgagenerations ->setMinimumWidth   ( 150 );
   connect( le_pmgagenerations, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgagenerations( const QString & ) ) );

   lbl_pmgamutate = new QLabel      ( tr( "GA mutate probability (default: .1)" ), this );
   lbl_pmgamutate ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgamutate ->setMinimumHeight( minHeight1 );
   lbl_pmgamutate ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgamutate ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgamutate ->setMinimumWidth ( QFontMetrics( lbl_pmgamutate->font() ).maxWidth() * 19 );

   le_pmgamutate = new QLineEdit     ( this, "pmgamutate Line Edit" );
   le_pmgamutate ->setText           ( parameters->count( "pmgamutate" ) ? ( *parameters )[ "pmgamutate" ] : "" );
   le_pmgamutate ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgamutate ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgamutate ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgamutate ->setMinimumHeight  ( minHeight1 );
   le_pmgamutate ->setMinimumWidth   ( 150 );
   connect( le_pmgamutate, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgamutate( const QString & ) ) );

   lbl_pmgasamutate = new QLabel      ( tr( "GA simulated annealing probability (default: .5)" ), this );
   lbl_pmgasamutate ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgasamutate ->setMinimumHeight( minHeight1 );
   lbl_pmgasamutate ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgasamutate ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgasamutate ->setMinimumWidth ( QFontMetrics( lbl_pmgasamutate->font() ).maxWidth() * 19 );

   le_pmgasamutate = new QLineEdit     ( this, "pmgasamutate Line Edit" );
   le_pmgasamutate ->setText           ( parameters->count( "pmgasamutate" ) ? ( *parameters )[ "pmgasamutate" ] : "" );
   le_pmgasamutate ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgasamutate ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgasamutate ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgasamutate ->setMinimumHeight  ( minHeight1 );
   le_pmgasamutate ->setMinimumWidth   ( 150 );
   connect( le_pmgasamutate, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgasamutate( const QString & ) ) );

   lbl_pmgacrossover = new QLabel      ( tr( "GA crossover (default: .4)" ), this );
   lbl_pmgacrossover ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgacrossover ->setMinimumHeight( minHeight1 );
   lbl_pmgacrossover ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgacrossover ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgacrossover ->setMinimumWidth ( QFontMetrics( lbl_pmgacrossover->font() ).maxWidth() * 19 );

   le_pmgacrossover = new QLineEdit     ( this, "pmgacrossover Line Edit" );
   le_pmgacrossover ->setText           ( parameters->count( "pmgacrossover" ) ? ( *parameters )[ "pmgacrossover" ] : "" );
   le_pmgacrossover ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgacrossover ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgacrossover ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgacrossover ->setMinimumHeight  ( minHeight1 );
   le_pmgacrossover ->setMinimumWidth   ( 150 );
   connect( le_pmgacrossover, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgacrossover( const QString & ) ) );

   lbl_pmgaelitism = new QLabel      ( tr( "GA elitism (default: 1)" ), this );
   lbl_pmgaelitism ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgaelitism ->setMinimumHeight( minHeight1 );
   lbl_pmgaelitism ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgaelitism ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgaelitism ->setMinimumWidth ( QFontMetrics( lbl_pmgaelitism->font() ).maxWidth() * 19 );

   le_pmgaelitism = new QLineEdit     ( this, "pmgaelitism Line Edit" );
   le_pmgaelitism ->setText           ( parameters->count( "pmgaelitism" ) ? ( *parameters )[ "pmgaelitism" ] : "" );
   le_pmgaelitism ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgaelitism ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgaelitism ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgaelitism ->setMinimumHeight  ( minHeight1 );
   le_pmgaelitism ->setMinimumWidth   ( 150 );
   connect( le_pmgaelitism, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgaelitism( const QString & ) ) );

   lbl_pmgaearlytermination = new QLabel      ( tr( "GA early termination (default: 5)" ), this );
   lbl_pmgaearlytermination ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgaearlytermination ->setMinimumHeight( minHeight1 );
   lbl_pmgaearlytermination ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgaearlytermination ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgaearlytermination ->setMinimumWidth ( QFontMetrics( lbl_pmgaearlytermination->font() ).maxWidth() * 19 );

   le_pmgaearlytermination = new QLineEdit     ( this, "pmgaearlytermination Line Edit" );
   le_pmgaearlytermination ->setText           ( parameters->count( "pmgaearlytermination" ) ? ( *parameters )[ "pmgaearlytermination" ] : "" );
   le_pmgaearlytermination ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgaearlytermination ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgaearlytermination ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgaearlytermination ->setMinimumHeight  ( minHeight1 );
   le_pmgaearlytermination ->setMinimumWidth   ( 150 );
   connect( le_pmgaearlytermination, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgaearlytermination( const QString & ) ) );

   lbl_pmgapointsmax = new QLabel      ( tr( "GA maximum points per parameter (default: 100)" ), this );
   lbl_pmgapointsmax ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmgapointsmax ->setMinimumHeight( minHeight1 );
   lbl_pmgapointsmax ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmgapointsmax ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmgapointsmax ->setMinimumWidth ( QFontMetrics( lbl_pmgapointsmax->font() ).maxWidth() * 19 );

   le_pmgapointsmax = new QLineEdit     ( this, "pmgapointsmax Line Edit" );
   le_pmgapointsmax ->setText           ( parameters->count( "pmgapointsmax" ) ? ( *parameters )[ "pmgapointsmax" ] : "" );
   le_pmgapointsmax ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmgapointsmax ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmgapointsmax ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmgapointsmax ->setMinimumHeight  ( minHeight1 );
   le_pmgapointsmax ->setMinimumWidth   ( 150 );
   connect( le_pmgapointsmax, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmgapointsmax( const QString & ) ) );

   lbl_pmbestdeltastart = new QLabel      ( tr( "Initial param delta start (default 1)" ), this );
   lbl_pmbestdeltastart ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestdeltastart ->setMinimumHeight( minHeight1 );
   lbl_pmbestdeltastart ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestdeltastart ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestdeltastart ->setMinimumWidth ( QFontMetrics( lbl_pmbestdeltastart->font() ).maxWidth() * 19 );

   le_pmbestdeltastart = new QLineEdit     ( this, "pmbestdeltastart Line Edit" );
   le_pmbestdeltastart ->setText           ( parameters->count( "pmbestdeltastart" ) ? ( *parameters )[ "pmbestdeltastart" ] : "" );
   le_pmbestdeltastart ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestdeltastart ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestdeltastart ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestdeltastart ->setMinimumHeight  ( minHeight1 );
   le_pmbestdeltastart ->setMinimumWidth   ( 150 );
   connect( le_pmbestdeltastart, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestdeltastart( const QString & ) ) );

   lbl_pmbestdeltadivisor = new QLabel      ( tr( "Initial param delta divisor (default 10)" ), this );
   lbl_pmbestdeltadivisor ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestdeltadivisor ->setMinimumHeight( minHeight1 );
   lbl_pmbestdeltadivisor ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestdeltadivisor ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestdeltadivisor ->setMinimumWidth ( QFontMetrics( lbl_pmbestdeltadivisor->font() ).maxWidth() * 19 );

   le_pmbestdeltadivisor = new QLineEdit     ( this, "pmbestdeltadivisor Line Edit" );
   le_pmbestdeltadivisor ->setText           ( parameters->count( "pmbestdeltadivisor" ) ? ( *parameters )[ "pmbestdeltadivisor" ] : "" );
   le_pmbestdeltadivisor ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestdeltadivisor ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestdeltadivisor ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestdeltadivisor ->setMinimumHeight  ( minHeight1 );
   le_pmbestdeltadivisor ->setMinimumWidth   ( 150 );
   connect( le_pmbestdeltadivisor, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestdeltadivisor( const QString & ) ) );

   lbl_pmbestdeltamin = new QLabel      ( tr( "Delta minimum (default .01)" ), this );
   lbl_pmbestdeltamin ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmbestdeltamin ->setMinimumHeight( minHeight1 );
   lbl_pmbestdeltamin ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmbestdeltamin ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmbestdeltamin ->setMinimumWidth ( QFontMetrics( lbl_pmbestdeltamin->font() ).maxWidth() * 19 );

   le_pmbestdeltamin = new QLineEdit     ( this, "pmbestdeltamin Line Edit" );
   le_pmbestdeltamin ->setText           ( parameters->count( "pmbestdeltamin" ) ? ( *parameters )[ "pmbestdeltamin" ] : "" );
   le_pmbestdeltamin ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmbestdeltamin ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmbestdeltamin ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmbestdeltamin ->setMinimumHeight  ( minHeight1 );
   le_pmbestdeltamin ->setMinimumWidth   ( 150 );
   connect( le_pmbestdeltamin, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmbestdeltamin( const QString & ) ) );

   lbl_pmdebug = new QLabel      ( tr( "Debug level 1,2 or 3 (default: 0)" ), this );
   lbl_pmdebug ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_pmdebug ->setMinimumHeight( minHeight1 );
   lbl_pmdebug ->setPalette      ( QPalette(USglobal->global_colors.cg_label, USglobal->global_colors.cg_label, USglobal->global_colors.cg_label ) );
   lbl_pmdebug ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_pmdebug ->setMinimumWidth ( QFontMetrics( lbl_pmdebug->font() ).maxWidth() * 19 );

   le_pmdebug = new QLineEdit     ( this, "pmdebug Line Edit" );
   le_pmdebug ->setText           ( parameters->count( "pmdebug" ) ? ( *parameters )[ "pmdebug" ] : "" );
   le_pmdebug ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_pmdebug ->setPalette        ( QPalette( USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal, USglobal->global_colors.cg_normal ) );
   le_pmdebug ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_pmdebug ->setMinimumHeight  ( minHeight1 );
   le_pmdebug ->setMinimumWidth   ( 150 );
   connect( le_pmdebug, SIGNAL( textChanged( const QString & ) ), SLOT( update_pmdebug( const QString & ) ) );

   pb_save =  new QPushButton ( tr( "Save" ), this );
   pb_save -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_save -> setMinimumHeight( minHeight1 );
   pb_save -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_save, SIGNAL( clicked() ), SLOT( save() ) );

   pb_load =  new QPushButton ( tr( "Load" ), this );
   pb_load -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_load -> setMinimumHeight( minHeight1 );
   pb_load -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_load, SIGNAL( clicked() ), SLOT( load() ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( QPalette( USglobal->global_colors.cg_pushb, USglobal->global_colors.cg_pushb_disabled, USglobal->global_colors.cg_pushb_active ) );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   QVBoxLayout *background = new QVBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addSpacing( 4 );
   QHBoxLayout * hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmtypes );
   hbl->addWidget( le_pmtypes );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_pmincrementally );
   hbl->addWidget( cb_pmallcombinations );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmrayleighdrho );
   hbl->addWidget( le_pmrayleighdrho );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmoutname );
   hbl->addWidget( le_pmoutname );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgridsize );
   hbl->addWidget( le_pmgridsize );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_pmapproxmaxdimension );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmharmonics );
   hbl->addWidget( le_pmharmonics );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmseed );
   hbl->addWidget( le_pmseed );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmmemory );
   hbl->addWidget( le_pmmemory );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestfinestconversion );
   hbl->addWidget( le_pmbestfinestconversion );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestcoarseconversion );
   hbl->addWidget( le_pmbestcoarseconversion );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestconversiondivisor );
   hbl->addWidget( le_pmbestconversiondivisor );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestrefinementrangepct );
   hbl->addWidget( le_pmbestrefinementrangepct );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmmaxdimension );
   hbl->addWidget( le_pmmaxdimension );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgapopulation );
   hbl->addWidget( le_pmgapopulation );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgagenerations );
   hbl->addWidget( le_pmgagenerations );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgamutate );
   hbl->addWidget( le_pmgamutate );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgasamutate );
   hbl->addWidget( le_pmgasamutate );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgacrossover );
   hbl->addWidget( le_pmgacrossover );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgaelitism );
   hbl->addWidget( le_pmgaelitism );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgaearlytermination );
   hbl->addWidget( le_pmgaearlytermination );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmgapointsmax );
   hbl->addWidget( le_pmgapointsmax );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestdeltastart );
   hbl->addWidget( le_pmbestdeltastart );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestdeltadivisor );
   hbl->addWidget( le_pmbestdeltadivisor );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmbestdeltamin );
   hbl->addWidget( le_pmbestdeltamin );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_pmdebug );
   hbl->addWidget( le_pmdebug );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( pb_save );
   hbl->addWidget( pb_load );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new QHBoxLayout( 0 );
   hbl->addSpacing( 4 );


   QHBoxLayout *hbl_bottom = new QHBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
}

void US_Hydrodyn_Cluster_Bfnb::cancel()
{
   close();
}

void US_Hydrodyn_Cluster_Bfnb::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/bfnb.html");
}

void US_Hydrodyn_Cluster_Bfnb::closeEvent( QCloseEvent *e )
{
   if ( parameters->count( "pmtypes" ) &&
        (*parameters)[ "pmtypes" ].isEmpty() )
   {
      parameters->erase( "pmtypes" );
   }
   if ( parameters->count( "pmincrementally" ) &&
        ( (*parameters)[ "pmincrementally" ].isEmpty() ||
          (*parameters)[ "pmincrementally" ] == "false" ) )
   {
      parameters->erase( "pmincrementally" );
   }
   if ( parameters->count( "pmallcombinations" ) &&
        ( (*parameters)[ "pmallcombinations" ].isEmpty() ||
          (*parameters)[ "pmallcombinations" ] == "false" ) )
   {
      parameters->erase( "pmallcombinations" );
   }
   if ( parameters->count( "pmrayleighdrho" ) &&
        (*parameters)[ "pmrayleighdrho" ].isEmpty() )
   {
      parameters->erase( "pmrayleighdrho" );
   }
   if ( parameters->count( "pmoutname" ) &&
        (*parameters)[ "pmoutname" ].isEmpty() )
   {
      parameters->erase( "pmoutname" );
   }
   if ( parameters->count( "pmgridsize" ) &&
        (*parameters)[ "pmgridsize" ].isEmpty() )
   {
      parameters->erase( "pmgridsize" );
   }
   if ( parameters->count( "pmapproxmaxdimension" ) &&
        ( (*parameters)[ "pmapproxmaxdimension" ].isEmpty() ||
          (*parameters)[ "pmapproxmaxdimension" ] == "false" ) )
   {
      parameters->erase( "pmapproxmaxdimension" );
   }
   if ( parameters->count( "pmharmonics" ) &&
        (*parameters)[ "pmharmonics" ].isEmpty() )
   {
      parameters->erase( "pmharmonics" );
   }
   if ( parameters->count( "pmseed" ) &&
        (*parameters)[ "pmseed" ].isEmpty() )
   {
      parameters->erase( "pmseed" );
   }
   if ( parameters->count( "pmmemory" ) &&
        (*parameters)[ "pmmemory" ].isEmpty() )
   {
      parameters->erase( "pmmemory" );
   }
   if ( parameters->count( "pmbestfinestconversion" ) &&
        (*parameters)[ "pmbestfinestconversion" ].isEmpty() )
   {
      parameters->erase( "pmbestfinestconversion" );
   }
   if ( parameters->count( "pmbestcoarseconversion" ) &&
        (*parameters)[ "pmbestcoarseconversion" ].isEmpty() )
   {
      parameters->erase( "pmbestcoarseconversion" );
   }
   if ( parameters->count( "pmbestconversiondivisor" ) &&
        (*parameters)[ "pmbestconversiondivisor" ].isEmpty() )
   {
      parameters->erase( "pmbestconversiondivisor" );
   }
   if ( parameters->count( "pmbestrefinementrangepct" ) &&
        (*parameters)[ "pmbestrefinementrangepct" ].isEmpty() )
   {
      parameters->erase( "pmbestrefinementrangepct" );
   }
   if ( parameters->count( "pmmaxdimension" ) &&
        (*parameters)[ "pmmaxdimension" ].isEmpty() )
   {
      parameters->erase( "pmmaxdimension" );
   }
   if ( parameters->count( "pmgapopulation" ) &&
        (*parameters)[ "pmgapopulation" ].isEmpty() )
   {
      parameters->erase( "pmgapopulation" );
   }
   if ( parameters->count( "pmgagenerations" ) &&
        (*parameters)[ "pmgagenerations" ].isEmpty() )
   {
      parameters->erase( "pmgagenerations" );
   }
   if ( parameters->count( "pmgamutate" ) &&
        (*parameters)[ "pmgamutate" ].isEmpty() )
   {
      parameters->erase( "pmgamutate" );
   }
   if ( parameters->count( "pmgasamutate" ) &&
        (*parameters)[ "pmgasamutate" ].isEmpty() )
   {
      parameters->erase( "pmgasamutate" );
   }
   if ( parameters->count( "pmgacrossover" ) &&
        (*parameters)[ "pmgacrossover" ].isEmpty() )
   {
      parameters->erase( "pmgacrossover" );
   }
   if ( parameters->count( "pmgaelitism" ) &&
        (*parameters)[ "pmgaelitism" ].isEmpty() )
   {
      parameters->erase( "pmgaelitism" );
   }
   if ( parameters->count( "pmgaearlytermination" ) &&
        (*parameters)[ "pmgaearlytermination" ].isEmpty() )
   {
      parameters->erase( "pmgaearlytermination" );
   }
   if ( parameters->count( "pmgapointsmax" ) &&
        (*parameters)[ "pmgapointsmax" ].isEmpty() )
   {
      parameters->erase( "pmgapointsmax" );
   }
   if ( parameters->count( "pmbestdeltastart" ) &&
        (*parameters)[ "pmbestdeltastart" ].isEmpty() )
   {
      parameters->erase( "pmbestdeltastart" );
   }
   if ( parameters->count( "pmbestdeltadivisor" ) &&
        (*parameters)[ "pmbestdeltadivisor" ].isEmpty() )
   {
      parameters->erase( "pmbestdeltadivisor" );
   }
   if ( parameters->count( "pmbestdeltamin" ) &&
        (*parameters)[ "pmbestdeltamin" ].isEmpty() )
   {
      parameters->erase( "pmbestdeltamin" );
   }
   if ( parameters->count( "pmdebug" ) &&
        (*parameters)[ "pmdebug" ].isEmpty() )
   {
      parameters->erase( "pmdebug" );
   }

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmtypes( const QString & )
{
   ( *parameters )[ "pmtypes" ] = le_pmtypes->text();
}

void US_Hydrodyn_Cluster_Bfnb::set_pmincrementally()
{
   ( *parameters )[ "pmincrementally" ] = cb_pmincrementally->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Bfnb::set_pmallcombinations()
{
   ( *parameters )[ "pmallcombinations" ] = cb_pmallcombinations->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Bfnb::update_pmrayleighdrho( const QString & )
{
   ( *parameters )[ "pmrayleighdrho" ] = le_pmrayleighdrho->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmoutname( const QString & )
{
   ( *parameters )[ "pmoutname" ] = le_pmoutname->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgridsize( const QString & )
{
   ( *parameters )[ "pmgridsize" ] = le_pmgridsize->text();
}

void US_Hydrodyn_Cluster_Bfnb::set_pmapproxmaxdimension()
{
   ( *parameters )[ "pmapproxmaxdimension" ] = cb_pmapproxmaxdimension->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Bfnb::update_pmharmonics( const QString & )
{
   ( *parameters )[ "pmharmonics" ] = le_pmharmonics->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmseed( const QString & )
{
   ( *parameters )[ "pmseed" ] = le_pmseed->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmmemory( const QString & )
{
   ( *parameters )[ "pmmemory" ] = le_pmmemory->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestfinestconversion( const QString & )
{
   ( *parameters )[ "pmbestfinestconversion" ] = le_pmbestfinestconversion->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestcoarseconversion( const QString & )
{
   ( *parameters )[ "pmbestcoarseconversion" ] = le_pmbestcoarseconversion->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestconversiondivisor( const QString & )
{
   ( *parameters )[ "pmbestconversiondivisor" ] = le_pmbestconversiondivisor->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestrefinementrangepct( const QString & )
{
   ( *parameters )[ "pmbestrefinementrangepct" ] = le_pmbestrefinementrangepct->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmmaxdimension( const QString & )
{
   ( *parameters )[ "pmmaxdimension" ] = le_pmmaxdimension->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgapopulation( const QString & )
{
   ( *parameters )[ "pmgapopulation" ] = le_pmgapopulation->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgagenerations( const QString & )
{
   ( *parameters )[ "pmgagenerations" ] = le_pmgagenerations->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgamutate( const QString & )
{
   ( *parameters )[ "pmgamutate" ] = le_pmgamutate->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgasamutate( const QString & )
{
   ( *parameters )[ "pmgasamutate" ] = le_pmgasamutate->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgacrossover( const QString & )
{
   ( *parameters )[ "pmgacrossover" ] = le_pmgacrossover->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgaelitism( const QString & )
{
   ( *parameters )[ "pmgaelitism" ] = le_pmgaelitism->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgaearlytermination( const QString & )
{
   ( *parameters )[ "pmgaearlytermination" ] = le_pmgaearlytermination->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmgapointsmax( const QString & )
{
   ( *parameters )[ "pmgapointsmax" ] = le_pmgapointsmax->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestdeltastart( const QString & )
{
   ( *parameters )[ "pmbestdeltastart" ] = le_pmbestdeltastart->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestdeltadivisor( const QString & )
{
   ( *parameters )[ "pmbestdeltadivisor" ] = le_pmbestdeltadivisor->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmbestdeltamin( const QString & )
{
   ( *parameters )[ "pmbestdeltamin" ] = le_pmbestdeltamin->text();
}

void US_Hydrodyn_Cluster_Bfnb::update_pmdebug( const QString & )
{
   ( *parameters )[ "pmdebug" ] = le_pmdebug->text();
}

void US_Hydrodyn_Cluster_Bfnb::save()
{
   QString fn = QFileDialog::getSaveFileName( 
                                              QString::null, 
                                              "*.cluster_bfnb",
                                              this,
                                              tr( QString( "%1: Save" ).arg( "US-SOMO: BNFB cluster interface" ) ),
                                              tr( "Save the parameters" ) 
                                              );

   if( !fn.isEmpty() )
   {
      if ( !fn.contains( QRegExp( "\\.cluster_bfnb$" ) ) )
      {
         fn += ".cluster_bfnb";
      }
      QFile f( fn );
      if ( !f.open( IO_WriteOnly ) )
      {
         QMessageBox::information( this,
                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BNFB cluster interface" ) ),
                                   QString( tr( "Could not open file %1 for writing" ) )
                                   .arg( fn ) 
                                   );
         return;
      }
      QTextStream ts( &f );
      ts << US_Json::compose( *parameters );
      f.close();
   }
}

void US_Hydrodyn_Cluster_Bfnb::load()
{
   QString fn = QFileDialog::getOpenFileName( 
                                              QString::null, 
                                              "*.cluster_bfnb",
                                              this,
                                              tr( QString( "%1: Open" ).arg( "US-SOMO: BNFB cluster interface" ) ),
                                              tr( "Load parameters" ) 
                                              );
   if( !fn.isEmpty() )
   {
      QFile f( fn );
      if ( !f.open( IO_ReadOnly ) )
      {
          QMessageBox::information( 
                                    this,
                                    tr( QString( "%1: Open" ).arg( "US-SOMO: BNFB cluster interface" ) ),
                                    QString( tr( "Could not open file %1 for reading" ) )
                                    .arg( fn ) 
                                    );
          return;
      }
      QString qs;
      QTextStream ts( &f );
      while ( !ts.atEnd() )
      {
          qs += ts.readLine();
      }
      f.close();
      *parameters = US_Json::split( qs );
      update_fields();
   }
}

void US_Hydrodyn_Cluster_Bfnb::update_fields()
{
   le_pmtypes                                      ->setText( parameters->count( "pmtypes" ) ? ( *parameters )[ "pmtypes" ] : "" );
   cb_pmincrementally                              ->setChecked( parameters->count( "pmincrementally" ) && ( *parameters )[ "pmincrementally" ] == "true" ? true : false );
   cb_pmallcombinations                            ->setChecked( parameters->count( "pmallcombinations" ) && ( *parameters )[ "pmallcombinations" ] == "true" ? true : false );
   le_pmrayleighdrho                               ->setText( parameters->count( "pmrayleighdrho" ) ? ( *parameters )[ "pmrayleighdrho" ] : "" );
   le_pmoutname                                    ->setText( parameters->count( "pmoutname" ) ? ( *parameters )[ "pmoutname" ] : "" );
   le_pmgridsize                                   ->setText( parameters->count( "pmgridsize" ) ? ( *parameters )[ "pmgridsize" ] : "" );
   cb_pmapproxmaxdimension                         ->setChecked( parameters->count( "pmapproxmaxdimension" ) && ( *parameters )[ "pmapproxmaxdimension" ] == "true" ? true : false );
   le_pmharmonics                                  ->setText( parameters->count( "pmharmonics" ) ? ( *parameters )[ "pmharmonics" ] : "" );
   le_pmseed                                       ->setText( parameters->count( "pmseed" ) ? ( *parameters )[ "pmseed" ] : "" );
   le_pmmemory                                     ->setText( parameters->count( "pmmemory" ) ? ( *parameters )[ "pmmemory" ] : "" );
   le_pmbestfinestconversion                       ->setText( parameters->count( "pmbestfinestconversion" ) ? ( *parameters )[ "pmbestfinestconversion" ] : "" );
   le_pmbestcoarseconversion                       ->setText( parameters->count( "pmbestcoarseconversion" ) ? ( *parameters )[ "pmbestcoarseconversion" ] : "" );
   le_pmbestconversiondivisor                      ->setText( parameters->count( "pmbestconversiondivisor" ) ? ( *parameters )[ "pmbestconversiondivisor" ] : "" );
   le_pmbestrefinementrangepct                     ->setText( parameters->count( "pmbestrefinementrangepct" ) ? ( *parameters )[ "pmbestrefinementrangepct" ] : "" );
   le_pmmaxdimension                               ->setText( parameters->count( "pmmaxdimension" ) ? ( *parameters )[ "pmmaxdimension" ] : "" );
   le_pmgapopulation                               ->setText( parameters->count( "pmgapopulation" ) ? ( *parameters )[ "pmgapopulation" ] : "" );
   le_pmgagenerations                              ->setText( parameters->count( "pmgagenerations" ) ? ( *parameters )[ "pmgagenerations" ] : "" );
   le_pmgamutate                                   ->setText( parameters->count( "pmgamutate" ) ? ( *parameters )[ "pmgamutate" ] : "" );
   le_pmgasamutate                                 ->setText( parameters->count( "pmgasamutate" ) ? ( *parameters )[ "pmgasamutate" ] : "" );
   le_pmgacrossover                                ->setText( parameters->count( "pmgacrossover" ) ? ( *parameters )[ "pmgacrossover" ] : "" );
   le_pmgaelitism                                  ->setText( parameters->count( "pmgaelitism" ) ? ( *parameters )[ "pmgaelitism" ] : "" );
   le_pmgaearlytermination                         ->setText( parameters->count( "pmgaearlytermination" ) ? ( *parameters )[ "pmgaearlytermination" ] : "" );
   le_pmgapointsmax                                ->setText( parameters->count( "pmgapointsmax" ) ? ( *parameters )[ "pmgapointsmax" ] : "" );
   le_pmbestdeltastart                             ->setText( parameters->count( "pmbestdeltastart" ) ? ( *parameters )[ "pmbestdeltastart" ] : "" );
   le_pmbestdeltadivisor                           ->setText( parameters->count( "pmbestdeltadivisor" ) ? ( *parameters )[ "pmbestdeltadivisor" ] : "" );
   le_pmbestdeltamin                               ->setText( parameters->count( "pmbestdeltamin" ) ? ( *parameters )[ "pmbestdeltamin" ] : "" );
   le_pmdebug                                      ->setText( parameters->count( "pmdebug" ) ? ( *parameters )[ "pmdebug" ] : "" );
}

